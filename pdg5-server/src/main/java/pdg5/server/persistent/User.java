package pdg5.server.persistent;

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "pdg", uniqueConstraints = { @UniqueConstraint(columnNames = "email"),
		@UniqueConstraint(columnNames = "username") })
public class User implements java.io.Serializable {

	private Integer id;
	private String email;
	private String username;
	private String pass;
	private Set friendsForToUser = new HashSet(0);
	private Set friendsForFromUser = new HashSet(0);
	private Set messages = new HashSet(0);
	private Set matchlists = new HashSet(0);
	private Set blacklistsForToUser = new HashSet(0);
	private Set blacklistsForFromUser = new HashSet(0);
	private Set gamesForPlayer2 = new HashSet(0);
	private Set gamesForPlayer1 = new HashSet(0);

	public User() {
	}

	public User(String email, String username) {
		this.email = email;
		this.username = username;
	}

	public User(String email, String username, String pass, Set friendsForToUser, Set friendsForFromUser, Set messages,
			Set matchlists, Set blacklistsForToUser, Set blacklistsForFromUser, Set gamesForPlayer2,
			Set gamesForPlayer1) {
		this.email = email;
		this.username = username;
		this.pass = pass;
		this.friendsForToUser = friendsForToUser;
		this.friendsForFromUser = friendsForFromUser;
		this.messages = messages;
		this.matchlists = matchlists;
		this.blacklistsForToUser = blacklistsForToUser;
		this.blacklistsForFromUser = blacklistsForFromUser;
		this.gamesForPlayer2 = gamesForPlayer2;
		this.gamesForPlayer1 = gamesForPlayer1;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "email", unique = true, nullable = false, length = 60)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "username", unique = true, nullable = false, length = 60)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "pass", length = 256)
	public String getPass() {
		return this.pass;
	}

	public void setPass(String pass) {
		this.pass = pass;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByToUser")
	public Set getFriendsForToUser() {
		return this.friendsForToUser;
	}

	public void setFriendsForToUser(Set friendsForToUser) {
		this.friendsForToUser = friendsForToUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByFromUser")
	public Set getFriendsForFromUser() {
		return this.friendsForFromUser;
	}

	public void setFriendsForFromUser(Set friendsForFromUser) {
		this.friendsForFromUser = friendsForFromUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set getMessages() {
		return this.messages;
	}

	public void setMessages(Set messages) {
		this.messages = messages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set getMatchlists() {
		return this.matchlists;
	}

	public void setMatchlists(Set matchlists) {
		this.matchlists = matchlists;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByToUser")
	public Set getBlacklistsForToUser() {
		return this.blacklistsForToUser;
	}

	public void setBlacklistsForToUser(Set blacklistsForToUser) {
		this.blacklistsForToUser = blacklistsForToUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByFromUser")
	public Set getBlacklistsForFromUser() {
		return this.blacklistsForFromUser;
	}

	public void setBlacklistsForFromUser(Set blacklistsForFromUser) {
		this.blacklistsForFromUser = blacklistsForFromUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByPlayer2")
	public Set getGamesForPlayer2() {
		return this.gamesForPlayer2;
	}

	public void setGamesForPlayer2(Set gamesForPlayer2) {
		this.gamesForPlayer2 = gamesForPlayer2;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByPlayer1")
	public Set getGamesForPlayer1() {
		return this.gamesForPlayer1;
	}

	public void setGamesForPlayer1(Set gamesForPlayer1) {
		this.gamesForPlayer1 = gamesForPlayer1;
	}

	@Override
	public boolean equals(Object obj) {
		if(!(obj instanceof User))
		{
			return false;
		}
			
		User b = (User) obj;
		
		return id == b.getId() &&
				((username == null && b.getUsername() == null ) || username.equals(b.getUsername())) &&
				((pass == null && b.getPass() == null ) || pass.equals(b.getPass())) &&
				email.equals(b.getEmail());
	}
	
	@Override
	public String toString() {
		return id + ", " + username + ", " + email;
	}
}
